rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==============================================
    // HELPER FUNCTIONS
    // ==============================================
    
    // Check if user is authenticated admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.admin == true;
    }
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && 
             request.auth.uid == userId;
    }
    
    // Validate required fields exist
    function hasRequiredFields(fields) {
      return fields.diff(resource.data.keys()).size() == 0;
    }
    
    // Check if data size is within limits (prevent large payloads)
    function isValidSize() {
      return request.resource.size < 1048576; // 1MB limit
    }
    
    // Validate email format
    function isValidEmail(email) {
      return email.matches('.*@.*\\..*');
    }
    
    // Rate limiting check (basic implementation)
    function isWithinRateLimit() {
      return request.time > resource.data.lastRequest + duration.value(1, 's');
    }
    
    // ==============================================
    // PUBLIC COLLECTIONS
    // ==============================================
    
    // Editors collection - public read, admin write with validation
    match /editors/{editorId} {
      allow read: if true;
      allow create: if isAdmin() && 
                    isValidSize() &&
                    hasRequiredFields(['name', 'location', 'experience', 'professional', 'metadata']);
      allow update: if isAdmin() && 
                    isValidSize() &&
                    // Prevent tampering with system fields
                    request.resource.data.id == resource.data.id &&
                    request.resource.data.metadata.createdAt == resource.data.metadata.createdAt;
      allow delete: if isAdmin();
      
      // Credits subcollection - public read, admin write
      match /credits/{creditId} {
        allow read: if true;
        allow create: if isAdmin() && 
                      isValidSize() &&
                      hasRequiredFields(['editorId', 'show', 'role', 'timeline', 'metadata']);
        allow update: if isAdmin() && 
                      isValidSize() &&
                      request.resource.data.editorId == resource.data.editorId;
        allow delete: if isAdmin();
      }
      
      // Awards subcollection - public read, admin write  
      match /awards/{awardId} {
        allow read: if true;
        allow create: if isAdmin() && 
                      isValidSize() &&
                      hasRequiredFields(['editorId', 'award', 'metadata']);
        allow update: if isAdmin() && 
                      isValidSize() &&
                      request.resource.data.editorId == resource.data.editorId;
        allow delete: if isAdmin();
      }
    }
    
    // Editor knowledge summaries - public read, admin write
    match /editorKnowledge/{editorId} {
      allow read: if true;
      allow create: if isAdmin() && 
                    isValidSize() &&
                    hasRequiredFields(['editorId', 'summary', 'lastUpdated']);
      allow update: if isAdmin() && 
                    isValidSize() &&
                    request.resource.data.editorId == resource.data.editorId;
      allow delete: if isAdmin();
    }
    
    // ==============================================
    // ADMIN-ONLY COLLECTIONS
    // ==============================================
    
    // Research and knowledge database - admin only with validation
    match /research/{researchId} {
      allow read, create: if isAdmin() && 
                          isValidSize();
      allow update: if isAdmin() && 
                    isValidSize() &&
                    // Preserve audit trail
                    request.resource.data.metadata.createdAt == resource.data.metadata.createdAt &&
                    request.resource.data.metadata.createdBy == resource.data.metadata.createdBy;
      allow delete: if isAdmin();
    }
    
    // Research activities log - admin only, append-only for audit trail
    match /researchActivities/{activityId} {
      allow read, create: if isAdmin() && isValidSize();
      allow update, delete: if false; // Immutable audit log
    }
    
    // Research templates - admin only
    match /researchTemplates/{templateId} {
      allow read, write: if isAdmin() && isValidSize();
    }
    
    // Data source synchronization logs - admin only
    match /syncLogs/{logId} {
      allow read, create: if isAdmin() && isValidSize();
      allow update: if isAdmin() && 
                    isValidSize() &&
                    request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isAdmin();
    }
    
    // General analytics collection - admin only access
    match /analytics/{document=**} {
      allow read, write: if isAdmin() && isValidSize();
    }
    
    // ==============================================
    // USER-SPECIFIC COLLECTIONS
    // ==============================================
    
    // User profiles and preferences
    match /users/{userId} {
      allow read, write: if isOwner(userId) && 
                          isValidSize() &&
                          // Validate email if provided
                          (!('email' in request.resource.data) || 
                           isValidEmail(request.resource.data.email));
      
      // User favorites - user-specific access
      match /favorites/{favoriteId} {
        allow read, write: if isOwner(userId) && isValidSize();
      }
      
      // Saved searches - user-specific access  
      match /savedSearches/{searchId} {
        allow read, write: if isOwner(userId) && isValidSize();
      }
      
      // User activity log - read/create only for user
      match /activity/{activityId} {
        allow read, create: if isOwner(userId) && isValidSize();
        allow update, delete: if false; // Immutable activity log
      }
    }
    
    // ==============================================
    // ANALYTICS & TRACKING
    // ==============================================
    
    // Search analytics - write-only for tracking (privacy-focused)
    match /searches/{searchId} {
      allow read: if false; // Privacy: no reading search data
      allow create: if isValidSize() &&
                    // Limit search tracking payload
                    request.resource.data.size() < 10;
      allow update, delete: if false;
    }
    
    // Click tracking - anonymous write-only
    match /clicks/{clickId} {
      allow read: if false;
      allow create: if isValidSize() &&
                    request.resource.data.size() < 5;
      allow update, delete: if false;
    }
    
    // Performance metrics - admin read, system write
    match /performance/{metricId} {
      allow read: if isAdmin();
      allow create: if isValidSize();
      allow update, delete: if isAdmin();
    }
    
    // ==============================================
    // SYSTEM COLLECTIONS
    // ==============================================
    
    // Rate limiting and API usage tracking - system service account only
    match /rateLimits/{document=**} {
      allow read, write: if false; // Only service account access
    }
    
    // System configuration - admin only
    match /config/{configId} {
      allow read: if isAdmin();
      allow write: if isAdmin() && isValidSize();
    }
    
    // Error logs - admin read, system write
    match /errors/{errorId} {
      allow read: if isAdmin();
      allow create: if isValidSize();
      allow update, delete: if isAdmin();
    }
    
    // API keys and secrets - admin only (should use Secret Manager instead)
    match /secrets/{secretId} {
      allow read, write: if false; // Use Firebase Secret Manager instead
    }
    
    // ==============================================
    // FALLBACK RULE
    // ==============================================
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 